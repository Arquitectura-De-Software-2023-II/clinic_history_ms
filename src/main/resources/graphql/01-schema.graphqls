## Pets basic CRUD operations
type Query {
    getAllPets: [Pet]
    getPetByUsersDBId(usersDBId: String !): Pet
}
type Mutation{
    createPet(createPetDto: CreatePetDto!): Pet
    updatePetByUsersDBId(usersDBId: String!, updatePetInfoDto: PetInfoDto!): Pet
    deletePetByUsersDBId(usersDBId: String!): Pet
}

## Query Types
type Pet {
    id: String
    usersDBId: String
    PetInfo: PetInfo
    veterinaryAppointments: [VeterinaryAppointment]
}
type PetInfo{
    weight: Float
    age: Int
    diseases: [Disease]
    vaccines: [Vaccine]
}
type Disease{
    name: String
    description: String
    discoveryDate: String
}
type Vaccine{
    name: String
    vaccination_date: String
    description: String
    duration: Int
}
type VeterinaryAppointment{
    id: String
    appointmentDate: String
    doctorId: String
    description: String
    prescriptionDrugs: [PrescriptionDrug]
    scheduledAppointments: [ScheduledAppointment]
}
type PrescriptionDrug{
    name: String
    startDate: String
    endDate: String
    description: String
    periodicity: String
}
type ScheduledAppointment{
    specialist: String
    doctorId: String
    priority: AppointmentPriority
}
enum AppointmentPriority{
    hig
    medium
    low
}

## Mutation Types
input CreatePetDto {
    usersDBId: String!
    PetInfo: PetInfoDto
}
input PetInfoDto{
    weight: Float
    age: Int
    diseases: [DiseaseDto]
    vaccines: [VaccineDto]
}
input DiseaseDto{
    name: String
    description: String
    discoveryDate: String
}
input VaccineDto{
    name: String
    vaccination_date: String
    description: String
    duration: Int
}